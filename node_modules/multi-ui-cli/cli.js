#!/usr/bin/env node

const fs = require("fs-extra");
const { exec } = require("child_process");
const path = require("path");
const inquirer = require("inquirer").default;
const axios = require("axios");
const babel = require("@babel/core");
const mongoose = require("mongoose");
const CustomizationModel = require("./models/Component");

// Configuration
const CONFIG_FILE = path.join(process.cwd(), "multi-ui.config.json");
const DEFAULT_COMPONENT_PATH = "src/app/"; // Default folder structure
const MONGODB_URI = "mongodb+srv://omsalunkeeqvisor:pFTGY1dbVXRYN9g0@cluster0.l6vcn.mongodb.net/multiuichatbot";
const GITHUB_REPO = "om0852/multi-ui";

// Terminal styling
const terminalStyles = {
  success: '\x1b[32m%s\x1b[0m', // Green
  info: '\x1b[36m%s\x1b[0m',    // Cyan
  warning: '\x1b[33m%s\x1b[0m', // Yellow
  error: '\x1b[31m%s\x1b[0m'    // Red
};

// Connect to MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(MONGODB_URI);
    // console.log(terminalStyles.success, "✓ Successfully connected to MongoDB");
  } catch (error) {
    // console.error(terminalStyles.error, "✗ MongoDB connection error:", error.message);
    process.exit(1);
  }
};

// Utility function for installing Babel presets
const installBabelPresets = () => {
  return new Promise((resolve, reject) => {
    exec(
      "npm install --save-dev @babel/preset-react @babel/preset-typescript",
      (error, stdout, stderr) => {
        if (error) {
          return reject(`Error installing Babel presets: ${stderr}`);
        }
        resolve();
      }
    );
  });
};

// Setup: Ask user for project language preference and save it
const setupProject = async () => {
  try {
    console.log(terminalStyles.info, "\n🔧 Multi-UI CLI Setup\n");
    
    const { language, directory } = await inquirer.prompt([
      {
        type: "list",
        name: "language",
        message: "Select your project language:",
        choices: ["JavaScript", "TypeScript"],
      },
      {
        type: "input",
        name: "directory",
        message: "Specify the components directory (default: src/app/):",
        default: `${DEFAULT_COMPONENT_PATH}`,
      },
    ]);

    const resolvedPath = path.join(directory, "multi-ui", "components");
    const config = {
      language: language.toLowerCase(),
      componentPath: resolvedPath,
    };

    fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
    console.log(terminalStyles.success, "\n✓ Setup completed successfully!");
    console.log(terminalStyles.info, `\n📁 Language: ${language}\n📂 Components Path: ${resolvedPath}\n`);
  } catch (error) {
    console.error(terminalStyles.error, "\n✗ Setup failed:", error.message);
  }
};

// Fetch language preference and component path from config file
const getPreference = () => {
  if (fs.existsSync(CONFIG_FILE)) {
    const config = JSON.parse(fs.readFileSync(CONFIG_FILE, "utf8"));
    return config;
  }
  console.warn("No preference found. Defaulting to TypeScript and default folder structure.");
  return { language: "typescript", componentPath: `${DEFAULT_COMPONENT_PATH}multi-ui/components` };
};

// Fetch component from GitHub
const fetchFromGitHub = async (componentName) => {
  // Handle special cases for component names
  const specialCases = {
    'accordion': 'accordian'
  };
  
  const baseName = componentName.split('_')[0].toLowerCase();
  const folderName = specialCases[baseName] || baseName;
  
  const urls = {
    tsx: `https://raw.githubusercontent.com/${GITHUB_REPO}/main/app/${folderName}/tsx/${componentName}.tsx`,
    jsx: `https://raw.githubusercontent.com/${GITHUB_REPO}/main/app/${folderName}/jsx/${componentName}.jsx`,
    example: `https://raw.githubusercontent.com/${GITHUB_REPO}/main/app/${folderName}/examples/Example_${componentName.split('_')[1]}.tsx`
  };

  try {
    console.log(terminalStyles.info, "\n🔍 Fetching component...");
    
    const [tsxResponse, jsxResponse, exampleResponse] = await Promise.all([
      axios.get(urls.tsx).catch((error) => {
        if (error.response?.status !== 404) {
          console.log(terminalStyles.warning, `\n⚠ Error: ${error.message}`);
        }
        return null;
      }),
      axios.get(urls.jsx).catch(() => null),
      axios.get(urls.example).catch(() => null)
    ]);

    if (!tsxResponse && !jsxResponse) {
      throw new Error(`Component '${componentName}' not found in GitHub repository`);
    }

    return {
      tsx: tsxResponse?.data,
      jsx: jsxResponse?.data,
      example: exampleResponse?.data,
      componentName
    };
  } catch (error) {
    throw new Error(`Error fetching .....: ${error.message}`);
  }
};

// Convert TypeScript (.tsx) code to JavaScript (.jsx)
const convertTsxToJsx = (tsxCode, fileName) => {
  const transformed = babel.transformSync(tsxCode, {
    presets: ["@babel/preset-react", "@babel/preset-typescript"],
    filename: fileName,
  });
  return transformed.code;
};

// Create a new component
const createComponent = async (componentIdOrName, customFilename = null) => {
  const { language, componentPath } = getPreference();
  const extension = language === "javascript" ? "jsx" : "tsx";
  const componentDir = path.join(process.cwd(), componentPath);

  try {
    fs.ensureDirSync(componentDir);
    
    let component;
    
    // Check if it's a MongoDB ID (24 characters) or component name
    if (componentIdOrName.length === 24) {
      // Fetch from MongoDB
      console.log(terminalStyles.info, "\n🔄 Fetching component...");
      await connectDB();
      component = await CustomizationModel.findById(componentIdOrName);
      if (!component) {
        throw new Error(`No component found with ID: ${componentIdOrName}`);
      }

      const componentName = customFilename || component.componentName;
      const componentFile = path.join(componentDir, `${componentName}.${extension}`);
      
      if (language === "javascript") {
        console.log(terminalStyles.info, "🔄 Converting TypeScript to JavaScript...");
        const jsxCode = convertTsxToJsx(component.generatedCode, `${componentName}.tsx`);
        fs.writeFileSync(componentFile, jsxCode);
      } else {
        fs.writeFileSync(componentFile, component.generatedCode);
      }

    } else {
      // Fetch from GitHub
      component = await fetchFromGitHub(componentIdOrName);
      if (!component.tsx && !component.jsx) {
        throw new Error(`Component '${componentIdOrName}' not found in GitHub repository`);
      }

      const componentName = customFilename || componentIdOrName;
      const componentFile = path.join(componentDir, `${componentName}.${extension}`);

      if (language === "javascript") {
        if (component.jsx) {
          fs.writeFileSync(componentFile, component.jsx);
        } else if (component.tsx) {
          console.log(terminalStyles.info, "🔄 Converting TypeScript to JavaScript...");
          const jsxCode = convertTsxToJsx(component.tsx, `${componentName}.tsx`);
          fs.writeFileSync(componentFile, jsxCode);
        }
      } else {
        // TypeScript
        if (component.tsx) {
          fs.writeFileSync(componentFile, component.tsx);
        } else {
          throw new Error("TypeScript version of the component is not available");
        }
      }
    }

    console.log(terminalStyles.success, "\n✓ Component created successfully!\n");
    console.log(terminalStyles.info, `📁 Component Location: ${componentDir}\n`);
    
    if (componentIdOrName.length === 24) {
      await mongoose.disconnect();
    }
  } catch (error) {
    console.error(terminalStyles.error, `\n✗ Error: ${error.message}\n`);
    if (componentIdOrName.length === 24) {
      await mongoose.disconnect();
    }
  }
};

// Remove a component
const removeComponent = async (filename) => {
  const { language, componentPath } = getPreference();
  const extension = language === "javascript" ? "jsx" : "tsx";
  const componentDir = path.join(process.cwd(), componentPath);
  const componentFile = path.join(componentDir, `${filename}.${extension}`);
  const exampleFile = path.join(componentDir, "examples", `${filename}_Example.${extension}`);

  try {
    let filesRemoved = [];

    if (fs.existsSync(componentFile)) {
      fs.unlinkSync(componentFile);
      filesRemoved.push(componentFile);
    }

    if (fs.existsSync(exampleFile)) {
      fs.unlinkSync(exampleFile);
      filesRemoved.push(exampleFile);
    }

    if (filesRemoved.length === 0) {
      console.log(terminalStyles.warning, `\n⚠ No files found for component: ${filename}\n`);
      return;
    }

    console.log(terminalStyles.success, "\n✓ Files removed successfully!\n");
    filesRemoved.forEach(file => {
      console.log(terminalStyles.info, `🗑️  Removed: ${file}`);
    });
    console.log(); // Empty line for spacing
  } catch (error) {
    console.error(terminalStyles.error, `\n✗ Error removing files: ${error.message}\n`);
  }
};

// List available components from GitHub
const listComponents = async () => {
  try {
    console.log(terminalStyles.info, "\n📋 Available Components:\n");
    
    const response = await axios.get(`https://api.github.com/repos/${GITHUB_REPO}/contents/app`);
    const components = response.data
      .filter(item => item.type === 'dir')
      .map(item => item.name);

    let totalTsxFiles = 0;
    console.log(terminalStyles.info, `Total Components: ${components.length}\n`);

    for (const component of components) {
      try {
        const variantsResponse = await axios.get(`https://api.github.com/repos/${GITHUB_REPO}/contents/app/${component}/tsx`);
        const variants = variantsResponse.data
          .filter(item => item.type === 'file' && item.name.endsWith('.tsx'))
          .map(item => item.name.replace('.tsx', ''));
        
        const variantCount = variants.length;
        totalTsxFiles += variantCount;
        
        console.log(`${component.charAt(0).toUpperCase() + component.slice(1)} (${variantCount} Variants)`);
      } catch (error) {
        console.log(`${component.charAt(0).toUpperCase() + component.slice(1)} (0 Variants)`);
        continue;
      }
    }
    
    console.log(terminalStyles.info, `\nTotal Variants: ${totalTsxFiles}`);
    console.log();
  } catch (error) {
    console.error(terminalStyles.error, "\n✗ Error fetching component list:", error.message, "\n");
  }
};

// Show version information
const showVersion = () => {
  const packageJson = require('./package.json');
  console.log(terminalStyles.info, `\n📦 multi-ui-cli version ${packageJson.version}\n`);
};

// Search components
const searchComponents = async (searchTerm) => {
  try {
    const response = await axios.get(`https://api.github.com/repos/${GITHUB_REPO}/contents/app`);
    const components = response.data
      .filter(item => item.type === 'dir')
      .map(item => item.name)
      .filter(name => name.toLowerCase().includes(searchTerm.toLowerCase()));

    if (components.length === 0) {
      console.log(terminalStyles.warning, `\n⚠ No components found matching '${searchTerm}'\n`);
      return;
    }

    console.log(terminalStyles.info, `\n🔍 Search results for '${searchTerm}':\n`);
    components.forEach(comp => {
      console.log(`  ${comp}`);
    });
    console.log();
  } catch (error) {
    console.error(terminalStyles.error, "\n✗ Error searching components:", error.message, "\n");
  }
};

// Interactive component selection
const interactiveAdd = async () => {
  try {
    const response = await axios.get(`https://api.github.com/repos/${GITHUB_REPO}/contents/app`);
    const components = response.data
      .filter(item => item.type === 'dir')
      .map(item => item.name);

    const { component } = await inquirer.prompt([
      {
        type: 'list',
        name: 'component',
        message: 'Select a component:',
        choices: components
      }
    ]);

    // Get variants for selected component
    const variantsResponse = await axios.get(`https://api.github.com/repos/${GITHUB_REPO}/contents/app/${component}/tsx`);
    const variants = variantsResponse.data
      .filter(item => item.type === 'file' && item.name.endsWith('.tsx'))
      .map(item => item.name.replace('.tsx', ''));

    const { variant } = await inquirer.prompt([
      {
        type: 'list',
        name: 'variant',
        message: 'Select a variant:',
        choices: variants
      }
    ]);

    const { customName } = await inquirer.prompt([
      {
        type: 'input',
        name: 'customName',
        message: 'Enter custom name (optional, press Enter to skip):',
      }
    ]);

    const { addExample } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'addExample',
        message: 'Would you like to add the example file?',
        default: false
      }
    ]);

    return {
      componentName: variant,
      customFilename: customName || null,
      addExample
    };
  } catch (error) {
    console.error(terminalStyles.error, "\n✗ Error in interactive mode:", error.message, "\n");
    return null;
  }
};

// Show help information
const showHelp = () => {
  console.log(terminalStyles.info, "\n🚀 Multi-UI CLI Help\n");
  console.log("Commands:");
  console.log("  npx multi-ui setup                                - Initialize project settings");
  console.log("  npx multi-ui list                                - List all available components");
  console.log("  npx multi-ui search <term>                       - Search for components");
  console.log("  npx multi-ui interactive                         - Interactive component selection");
  console.log("  npx multi-ui add <ComponentName> [filename]       - Fetch component from GitHub");
  console.log("  npx multi-ui add <ComponentID> [filename]        - Fetch component from MongoDB");
  console.log("  npx multi-ui add <Component> --example [filename] - Add only the example file");
  console.log("  npx multi-ui remove <ComponentName>              - Remove a component");
  console.log("  npx multi-ui --version                          - Show version information");
  console.log("  npx multi-ui --help                             - Show this help message\n");
  console.log("Examples:");
  console.log("  npx multi-ui setup");
  console.log("  npx multi-ui list");
  console.log("  npx multi-ui add Accordion_1                     # Creates Accordion_1.tsx");
  console.log("  npx multi-ui add Accordion_1 MyCustomAccordion   # Creates MyCustomAccordion.tsx");
  console.log("  npx multi-ui add Accordion_1 --example          # Creates Accordion_1_Example.tsx");
  console.log("  npx multi-ui add 67ebe9ea02982b02d0ffc9d8 MyComponent");
  console.log("  npx multi-ui remove Accordion_1\n");
  console.log("Options:");
  console.log("  --example     Add only the example file for the component");
  console.log("  --help        Show this help message\n");
  console.log("Notes:");
  console.log("  - When using a custom filename, the file extension (.tsx or .jsx) will be added automatically");
  console.log("  - The filename is optional. If not provided, the original component name will be used");
  console.log("  - Custom filenames work with both GitHub components and MongoDB components\n");
};

// Create example file only
const createExampleOnly = async (componentName, customFilename = null) => {
  const { language, componentPath } = getPreference();
  const extension = language === "javascript" ? "jsx" : "tsx";
  const componentDir = path.join(process.cwd(), componentPath);
  const exampleDir = path.join(componentDir, 'examples');

  try {
    fs.ensureDirSync(exampleDir);
    
    // Fetch from GitHub
    const component = await fetchFromGitHub(componentName);
    if (!component.example) {
      throw new Error(`No example found for component '${componentName}'`);
    }

    const filename = customFilename || componentName;
    const exampleFile = path.join(exampleDir, `${filename}_Example.${extension}`);
    
    if (language === "javascript") {
      console.log(terminalStyles.info, "🔄 Converting example to JavaScript...");
      const jsxCode = convertTsxToJsx(component.example, `${filename}_Example.tsx`);
      fs.writeFileSync(exampleFile, jsxCode);
    } else {
      fs.writeFileSync(exampleFile, component.example);
    }

    console.log(terminalStyles.success, "\n✓ Example created successfully!\n");
    console.log(terminalStyles.info, `📁 Example Location: ${exampleFile}\n`);
  } catch (error) {
    console.error(terminalStyles.error, `\n✗ Error: ${error.message}\n`);
  }
};

// Main CLI handler
const main = async () => {
  const [action, componentIdOrName, ...args] = process.argv.slice(2);
  const options = args.filter(arg => arg.startsWith('--'));
  const nonOptions = args.filter(arg => !arg.startsWith('--'));
  const customFilename = nonOptions[0];

  // Handle special commands
  if (action === '--help' || action === '-h') {
    showHelp();
    return;
  }

  if (action === '--version' || action === '-v') {
    showVersion();
    return;
  }

  switch (action) {
    case "setup":
      await installBabelPresets();
      await setupProject();
      break;
    case "list":
      await listComponents();
      break;
    case "search":
      if (!componentIdOrName) {
        console.log(terminalStyles.error, "\n✗ Error: Search term is required");
        console.log(terminalStyles.info, "\nUsage: npx multi-ui search <term>\n");
        break;
      }
      await searchComponents(componentIdOrName);
      break;
    case "interactive":
      const result = await interactiveAdd();
      if (result) {
        if (result.addExample) {
          await createExampleOnly(result.componentName, result.customFilename);
        }
        await createComponent(result.componentName, result.customFilename);
      }
      break;
    case "add":
      if (!componentIdOrName) {
        console.log(terminalStyles.error, "\n✗ Error: Component name or ID is required");
        console.log(terminalStyles.info, "\nRun 'npx multi-ui --help' for usage information\n");
        break;
      }
      if (options.includes('--example')) {
        await createExampleOnly(componentIdOrName, customFilename);
      } else {
        await createComponent(componentIdOrName, customFilename);
      }
      break;
    case "remove":
      if (!componentIdOrName) {
        console.log(terminalStyles.error, "\n✗ Error: Component name is required");
        console.log(terminalStyles.info, "\nRun 'npx multi-ui --help' for usage information\n");
        break;
      }
      await removeComponent(componentIdOrName);
      break;
    default:
      showHelp();
  }
};

main().catch((error) => {
  console.error(terminalStyles.error, "\n✗ Unexpected error:", error.message, "\n");
  process.exit(1);
});
